stages:
  ## Take backup of the existing MySQL database
  Take MySQL Backup:
    actions:
      # This step takes the backup of the target database, using mysqldump command
      - type: shell
        command: docker exec -i mysqldb /bin/bash -c "mysqldump --user=${LIQUIBASE_COMMAND_USERNAME} --password=${LIQUIBASE_COMMAND_PASSWORD} ${LB_ENVIRONMENT} > BASE/${LB_ENVIRONMENT}_backup.sql"
        # command: mysqldump --user=${CLONED_UID} --password=${CLONED_PW} ${CLONED_DB} > BASE/${LB_ENVIRONMENT}_backup.sql

  ## Setup cloned MySQL database
  Setup MySQL Clone:
    actions:
      - type: shell
        command: docker run -p ${CLONED_PORT}:3306 --name mysqldb_cloned -v ${PWD}/BASE/${LB_ENVIRONMENT}_backup.sql:/BASE/${LB_ENVIRONMENT}_backup.sql -e MYSQL_ROOT_PASSWORD=${CLONED_PW} -d mysql

      - type: shell
        command: |
            echo "Waiting ${SECONDS_TO_WAIT} seconds for cloned database to be available ..." && sleep ${SECONDS_TO_WAIT}
            # what are the ways to check if the docker container is up and ready?

      - type: shell
        command: docker exec -i mysqldb_cloned mysql --user=${CLONED_UID} --password=${CLONED_PW} -e "use sys; create database ${CLONED_DB};"

      - type: shell
        command: docker exec -i mysqldb_cloned /bin/bash -c "mysql --user=${CLONED_UID} --password=${CLONED_PW} ${CLONED_DB} < BASE/${LB_ENVIRONMENT}_backup.sql"
        # command: mysql --user=${CLONED_UID} --password=${CLONED_PW} ${CLONED_DB} < BASE/${LB_ENVIRONMENT}_backup.sql


  