##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########
globalVariables:
  ### Files
  ### Use absolute paths when using Liquibase's Docker container
  ###
  BASE_DIR: "BASE"
  DIFF_FILE: "${LIQUIBASE_REPORTS_PATH}/Diff_${LB_ENVIRONMENT}.json"
  SNAPSHOT_FILE: "${BASE_DIR}/Snapshot_${LB_ENVIRONMENT}.json"
stages:

  ## The first stage of actions
  Default:
    actions:
      #
      # Quality Checks for changelog
      #
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: changelog,
                  reports-name: "checks-report.html"
                 }
      #
      # Run diff
      # Update database type in cmdArgs (e.g., oracle, mssql, etc.)
      #
      - type: liquibase
        command: diff
        globalArgs: { outputfile: "${DIFF_FILE}" , reports-enabled: "true" }
        cmdArgs: { referenceURL: "offline:mysql?snapshot=${SNAPSHOT_FILE}", 
                   format: json, 
                   drift-severity: "1",  
                   drift-severity-missing: "2", 
                   drift-severity-unexpected: "3",
                   drift-severity-changed: "4",
                   reports-name: "diff-report.html"
                   }
      #
      # Check for drift
      # findstr for Windows agents, grep for Linux (and Liquibase's Docker container)
      #
      # - type: shell
      #   command: grep -E "unexpected|missing|changed" ${DIFF_FILE} >> /dev/null 2>&1 ; if [ $? -eq 0 ]; then exit 1; else exit 0; fi
      ##
      #  Create clone
      #
      - type: liquibase
        command: flow
        cmdArgs: {flowFile: "clone-setup.yaml"}
      #
      # Review pending changes
      #
      - type: liquibase
        command: updateSQL
        cmdArgs: { URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}" }
      #
      # Update the database
      #
      - type: liquibase
        command: update
        cmdArgs: { URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}",
                   format: json, 
                   drift-severity: "1",  
                   drift-severity-missing: "2", 
                   drift-severity-unexpected: "3",
                   drift-severity-changed: "4",
                   reports-name: "update_cloned-report.html"
                 }
      #
      # Validate rollback
      #
      - type: liquibase
        command: rollback-one-update-SQL
        cmdArgs: { URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}" }
      #
      #
      # Execute rollback
      #
      - type: liquibase
        command: rollback-one-update
        cmdArgs: { force: "true", URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}",
                   format: json, 
                   drift-severity: "1",  
                   drift-severity-missing: "2", 
                   drift-severity-unexpected: "3",
                   drift-severity-changed: "4",
                   reports-name: "rollback_cloned-report.html"
                 }
      #
      # Update the database
      #
      - type: liquibase
        command: update
        cmdArgs: {
                   format: json, 
                   drift-severity: "1",  
                   drift-severity-missing: "2", 
                   drift-severity-unexpected: "3",
                   drift-severity-changed: "4",
                   reports-name: "update-report.html"
        }
      #
      # Create updated snapshot
      #
      - type: liquibase
        command: snapshot
        globalArgs: { outputfile: "${SNAPSHOT_FILE}" }
        cmdArgs: { snapshotFormat: "json" }
      

## do these actions after all flow commands, regardless of whether the above commands were successful
endStage:
  actions:
    - type: liquibase
      command: history
    - type: liquibase
      command: flow
      cmdArgs: { flowFile: "clone-cleanup.yaml"}

